{"version":3,"sources":["components/input.js","components/Button.js","components/ButtonList.js","components/Calculator.js","logic/operate.js","logic/calculate.js","components/App.js","index.js"],"names":["Input","props","handleChange","e","display","target","value","state","this","type","className","onChange","React","Component","defaultProp","Button","handleClick","bind","onClick","ButtonList","buttons","btns","map","btn","content","Calculator","click","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","calculate","obj","buttonName","total","next","match","result","includes","parseFloat","App","calc","btnName","setState","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.7273200b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleChange = (e) => {\n    const { display } = this.props;\n    e.target.value = display;\n  }\n\n  render() {\n    const { display } = this.props;\n    return (\n      <input type=\"text\" className=\"calc-inp\" value={display} onChange={this.handleChange} />\n    );\n  }\n}\n\nInput.propTypes = {\n  display: PropTypes.string.isRequired,\n};\n\nInput.defaultProp = {\n  value: '0',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { handleClick, value } = this.props;\n    handleClick(value);\n  }\n\n  render() {\n    const { value, className } = this.props;\n\n    return (\n      <input\n        type=\"button\"\n        value={value}\n        className={className}\n        onClick={this.handleClick}\n      />\n\n    );\n  }\n}\n\nButton.propTypes = {\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Button from './Button';\n\nexport default class ButtonList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { buttons, handleClick } = this.props;\n    const btns = buttons.map((btn) => (\n      <li key={btn.content}>\n        <Button\n          value={btn.content}\n          className={btn.className}\n          handleClick={handleClick}\n        />\n      </li>\n    ));\n    return (\n      <ul className=\"btn-list flex\">\n        {btns}\n      </ul>\n    );\n  }\n}\n\nButtonList.propTypes = {\n  buttons: PropTypes.instanceOf(Array).isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from './input';\nimport ButtonList from './ButtonList';\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { buttons, display, click } = this.props;\n\n    return (\n      <div className=\"calc-div\">\n        <Input display={display} />\n        <ButtonList buttons={buttons} handleClick={click} />\n      </div>\n    );\n  }\n}\n\nCalculator.propTypes = {\n  buttons: PropTypes.instanceOf(Array).isRequired,\n  display: PropTypes.string.isRequired,\n  click: PropTypes.func.isRequired,\n};\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import Big from 'big.js';\nimport operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === '0' ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '%') {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big('100'))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next)\n          .div(Big('100'))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    return { next: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport Calculator from './Calculator';\nimport calculate from '../logic/calculate';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttons: [\n        { content: 'AC', className: 'btn' },\n        { content: '+/-', className: 'btn' },\n        { content: '%', className: 'btn' },\n        { content: 'รท', className: 'btn btn-orange' },\n        { content: '7', className: 'btn' },\n        { content: '8', className: 'btn' },\n        { content: '9', className: 'btn' },\n        { content: 'X', className: 'btn btn-orange' },\n        { content: '4', className: 'btn ' },\n        { content: '5', className: 'btn' },\n        { content: '6', className: 'btn' },\n        { content: '-', className: 'btn btn-orange' },\n        { content: '1', className: 'btn' },\n        { content: '2', className: 'btn' },\n        { content: '3', className: 'btn' },\n        { content: '+', className: 'btn btn-orange' },\n        { content: '0', className: 'btn' },\n        { content: '.', className: 'btn' },\n        { content: '=', className: 'btn btn-orange' },\n      ],\n      calc: {\n        total: null,\n        next: null,\n        operation: null,\n      },\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(btnName) {\n    const { calc } = this.state;\n    this.setState({ calc: calculate(calc, btnName) });\n  }\n\n  render() {\n    const { buttons, calc } = this.state;\n    return (\n      <Calculator\n        buttons={buttons}\n        click={this.handleClick}\n        display={calc.next || calc.total || '0'}\n      />\n    );\n  }\n}\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}