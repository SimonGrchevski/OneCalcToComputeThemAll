{"version":3,"sources":["components/input.js","components/Button.js","components/ButtonList.js","components/Calculator.js","logic/operate.js","components/App.js","logic/calculate.js","index.js"],"names":["Input","props","handleChange","e","display","target","value","state","this","type","className","onChange","React","Component","defaultProp","Button","handleClick","bind","onClick","ButtonList","buttons","content","btns","map","btn","Calculator","click","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","App","total","next","btnName","setState","obj","buttonName","match","result","includes","parseFloat","calculate","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.8bfb6e95.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleChange = (e) => {\n    const { display } = this.props;\n    e.target.value = display;\n  }\n\n  render() {\n    const { display } = this.props;\n    return (\n      <input type=\"text\" className=\"calc-inp\" value={display} onChange={this.handleChange} />\n    );\n  }\n}\n\nInput.propTypes = {\n  display: PropTypes.string.isRequired,\n};\n\nInput.defaultProp = {\n  value: '0',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Button extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { handleClick, value } = this.props;\n    handleClick(value);\n  }\n\n  render() {\n    const { value, className } = this.props;\n\n    return (\n      <input\n        type=\"button\"\n        value={value}\n        className={className}\n        onClick={this.handleClick}\n      />\n\n    );\n  }\n}\n\nButton.propTypes = {\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Button from './Button';\n\nexport default class ButtonList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttons: [\n        { content: 'AC', className: 'btn' },\n        { content: '+/-', className: 'btn' },\n        { content: '%', className: 'btn' },\n        { content: 'รท', className: 'btn btn-orange' },\n        { content: '7', className: 'btn' },\n        { content: '8', className: 'btn' },\n        { content: '9', className: 'btn' },\n        { content: 'x', className: 'btn btn-orange' },\n        { content: '4', className: 'btn' },\n        { content: '5', className: 'btn' },\n        { content: '6', className: 'btn' },\n        { content: '-', className: 'btn btn-orange' },\n        { content: '1', className: 'btn' },\n        { content: '2', className: 'btn' },\n        { content: '3', className: 'btn' },\n        { content: '+', className: 'btn btn-orange' },\n        { content: '0', className: 'btn' },\n        { content: '.', className: 'btn' },\n        { content: '=', className: 'btn btn-orange' },\n      ],\n    };\n  }\n\n  render() {\n    const { handleClick } = this.props;\n    const { buttons } = this.state;\n    const btns = buttons.map((btn) => (\n      <li key={btn.content}>\n        <Button\n          value={btn.content}\n          className={btn.className}\n          handleClick={handleClick}\n        />\n      </li>\n    ));\n    return (\n      <ul className=\"btn-list flex\">\n        {btns}\n      </ul>\n    );\n  }\n}\n\nButtonList.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from './input';\nimport ButtonList from './ButtonList';\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { display, click } = this.props;\n\n    return (\n      <div className=\"calc-div\">\n        <Input display={display} />\n        <ButtonList handleClick={click} />\n      </div>\n    );\n  }\n}\n\nCalculator.propTypes = {\n  display: PropTypes.string.isRequired,\n  click: PropTypes.func.isRequired,\n};\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || '0');\n  const two = Big(numberTwo || (operation === 'รท' || operation === 'x' ? '1' : '0'));\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React from 'react';\nimport Calculator from './Calculator';\nimport calculate from '../logic/calculate';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: null,\n      next: null,\n      operation: null,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(btnName) {\n    const { total, next, operation } = this.state;\n    this.setState(() => calculate({ total, next, operation }, btnName));\n  }\n\n  render() {\n    const { next, total } = this.state;\n    return (\n      <Calculator\n        click={this.handleClick}\n        display={next || total || '0'}\n      />\n    );\n  }\n}\n","import Big from 'big.js';\nimport operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === '0' ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '%') {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big('100'))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next)\n          .div(Big('100'))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    return { next: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}