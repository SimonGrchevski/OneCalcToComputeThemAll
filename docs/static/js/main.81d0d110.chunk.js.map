{"version":3,"sources":["components/input.js","components/Button.js","components/ButtonList.js","components/Calculator.js","logic/operate.js","components/App.js","logic/calculate.js","index.js"],"names":["Input","props","display","type","className","value","onChange","e","target","Button","handleClick","onClick","ButtonList","buttons","content","createButtons","React","useMemo","map","btn","Calculator","click","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","App","useState","total","next","state","setState","btnName","newState","obj","buttonName","match","result","includes","parseFloat","calculate","prevState","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.81d0d110.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Input(props) {\n  const { display } = props;\n\n  function handleChange(e) {\n    e.target.value = display;\n  }\n\n  return (\n    <input type=\"text\" className=\"calc-inp\" value={display} onChange={handleChange} />\n  );\n}\n\nInput.propTypes = {\n  display: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Button(props) {\n  const { value, className, handleClick } = props;\n\n  function clickHandler() {\n    handleClick(value);\n  }\n\n  return (\n    <input\n      type=\"button\"\n      value={value}\n      className={className}\n      onClick={clickHandler}\n    />\n  );\n}\n\nButton.propTypes = {\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Button from './Button';\n\nexport default function ButtonList(props) {\n  const buttons = [\n    { content: 'AC', className: 'btn' },\n    { content: '+/-', className: 'btn' },\n    { content: '%', className: 'btn' },\n    { content: 'รท', className: 'btn btn-orange' },\n    { content: '7', className: 'btn' },\n    { content: '8', className: 'btn' },\n    { content: '9', className: 'btn' },\n    { content: 'x', className: 'btn btn-orange' },\n    { content: '4', className: 'btn' },\n    { content: '5', className: 'btn' },\n    { content: '6', className: 'btn' },\n    { content: '-', className: 'btn btn-orange' },\n    { content: '1', className: 'btn' },\n    { content: '2', className: 'btn' },\n    { content: '3', className: 'btn' },\n    { content: '+', className: 'btn btn-orange' },\n    { content: '0', className: 'btn' },\n    { content: '.', className: 'btn' },\n    { content: '=', className: 'btn btn-orange' },\n  ];\n\n  const createButtons = React.useMemo(() => {\n    const { handleClick } = props;\n    const btns = buttons.map((btn) => (\n      <li key={btn.content}>\n        <Button\n          value={btn.content}\n          className={btn.className}\n          handleClick={handleClick}\n        />\n      </li>\n    ));\n    return btns;\n  });\n\n  return (\n    <ul className=\"btn-list flex\">\n      {createButtons}\n    </ul>\n  );\n}\n\nButtonList.propTypes = {\n  handleClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from './input';\nimport ButtonList from './ButtonList';\n\nexport default function Calculator(props) {\n  const { display, click } = props;\n\n  return (\n    <div className=\"calc-div\">\n      <Input display={display} />\n      <ButtonList handleClick={click} />\n    </div>\n  );\n}\n\nCalculator.propTypes = {\n  display: PropTypes.string.isRequired,\n  click: PropTypes.func.isRequired,\n};\n","import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || '0');\n  const two = Big(numberTwo || (operation === 'รท' || operation === 'x' ? '1' : '0'));\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    if (two.toString() === '0') return 'Divison by zero';\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React, { useState } from 'react';\nimport Calculator from './Calculator';\nimport calculate from '../logic/calculate';\n\nexport default function App() {\n  const [state, setState] = useState(\n    {\n      total: null,\n      next: null,\n      operation: null,\n    },\n  );\n  const handleClick = (btnName) => {\n    const newState = calculate(state, btnName);\n    setState((prevState) => ({\n      ...prevState,\n      ...newState,\n    }));\n  };\n\n  return (\n    <Calculator\n      click={handleClick}\n      display={state.next || state.total || '0'}\n    />\n  );\n}\n","import Big from 'big.js';\nimport operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === '0' ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '%') {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big('100'))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: null,\n        total: obj.next\n          .toString(),\n        operation: buttonName,\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    return { next: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}